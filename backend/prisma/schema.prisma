// backend/prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  schemas  = ["alarmas", "dimCentral", "dbo"]
}

// --- NUEVO MODELO: Tabla de Anomalías ---
model Anomalia {
  idAnomalia   Int     @id @map("idAnomalia")
  nomAnomalia  String? @db.VarChar(255)
  descAnomalia String? @db.VarChar(512)

  // Relación inversa
  alarmasHistorico AlarmasHistorico[]

  @@schema("alarmas")
  @@map("anomalia")
}

// --- NUEVO MODELO: Tabla de Empresas ---
model Empresa {
  idEmp        Int     @id @map("idEmp")
  nombre       String? @map("Empresa") @db.NVarChar(255)
  abreviatura  String? @map("EmpresaAbr") @db.VarChar(10)
  nombreMin    String? @map("EmpresaMin") @db.VarChar(100)
  nssa         Int?    @map("EmpresaNSSA")

  // Relaciones inversas
  alarmasHistorico AlarmasHistorico[]
  choferes         Choferes[]

  @@schema("dimCentral")
  @@map("empresa")
}

// --- MODELO PRINCIPAL ACTUALIZADO ---
model AlarmasHistorico {
  guid        String    @id @db.VarChar(50)
  dispositivo Int?      @db.Int
  interno     String?   @map("idinterno") @db.VarChar(20)
  alarmTypeId Int?      @map("alarmType")
  velocidad   Float?
  lng         String?   @db.VarChar(20)
  lat         String?   @db.VarChar(20)
  ubi         String?   @db.VarChar(50)
  alarmTime   DateTime? @db.DateTime
  imagen      String?   @db.VarChar(512)
  video       String?   @db.VarChar(512)
  estado      String?   @db.VarChar(50)
  descripcion String?   @db.VarChar(512)
  choferId    Int?      @map("chofer")
  
  // --- CAMBIO 1: La columna idAnomalia ha sido añadida ---
  idAnomalia  Int?

  // --- CAMBIO 2: La columna idEmpresa ahora es un INT y se usa para la relación ---
  idEmpresa   Int?      @map("idEmpresa") @db.Int
  
  // --- NUEVA COLUMNA: informada ---
  informada   Boolean?  @db.Bit

  // --- RELACIONES ACTUALIZADAS Y NUEVAS ---
  chofer    Choferes?   @relation(fields: [choferId], references: [choferes_id], onDelete: NoAction, onUpdate: NoAction)
  typeAlarm TypeAlarms? @relation(fields: [alarmTypeId], references: [type], onDelete: NoAction, onUpdate: NoAction)
  deviceInfo  Dispositivos? @relation(fields: [dispositivo], references: [idDispositivo], onDelete: NoAction, onUpdate: NoAction, map: "FK__alarmasHi__dispo__6BE468A3")
  
  // --- NUEVA RELACIÓN con Anomalia ---
  anomaliaInfo Anomalia? @relation(fields: [idAnomalia], references: [idAnomalia], onDelete: NoAction, onUpdate: NoAction)

  // --- NUEVA RELACIÓN con Empresa ---
  empresaInfo  Empresa?  @relation(fields: [idEmpresa], references: [idEmp], onDelete: NoAction, onUpdate: NoAction)
  
  @@schema("alarmas")
  @@map("alarmasHistorico")
}

model Dispositivos {
  id            Int     @id @map("id")
  nroInterno    Int?
  patente       String?
  idDispositivo Int     @unique @map("idDispositivo") @db.Int
  did           Int?
  sim           String? @db.VarChar(20)

  alarmas AlarmasHistorico[]

  @@schema("alarmas")
  @@map("dispositivos")
}

model TypeAlarms {
  type  Int     @id
  alarm String? @db.VarChar(200)

  alarmas AlarmasHistorico[]

  @@schema("alarmas")
  @@map("typeAlarms")
}

// --- MODELO CHOFERES ACTUALIZADO CON RELACIÓN ---
model Choferes {
  choferes_id     Int     @id @map("idEmpleado")
  apellido_nombre String  @map("apellido_nombre") @db.NVarChar(255)
  foto            String? @db.VarChar(255)
  dni             String? @map("DNI") @db.NVarChar(50)
  anios           Int?    @map("legajo")
  idEmpresa       Int?    @map("idEmpresa") // Este campo también es un INT
  sector          String? @db.NVarChar(255)
  puesto          String? @db.NVarChar(255)
  estado          String? @map("Estado") @db.NVarChar(50)
  liquidacionEstado String? @map("LiquidacionEstado") @db.NVarChar(50)

  // --- MEJORA: Relación añadida para Choferes -> Empresa ---
  empresaInfo     Empresa?  @relation(fields: [idEmpresa], references: [idEmp], onDelete: NoAction, onUpdate: NoAction)

  alarmas AlarmasHistorico[]

  @@schema("dimCentral")
  @@map("empleados")
}

model Sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61E0D76274") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
  @@schema("dbo")
  @@map("sysdiagrams")
}

// --- USERS: modelo y enum de roles ---


model User {
  id       Int    @id @default(autoincrement())
  username String @unique @db.NVarChar(255)
  // Contraseña almacenada hasheada (bcrypt)
  password String @db.VarChar(255)
  // Prisma enum (se almacena como texto en SQL Server)
  role     String @default("USER") @db.NVarChar(32)

  @@schema("dimCentral")
  @@map("users")
}

// --- NUEVAS TABLAS DE INFORMES ---

model Informes {
  idInforme Int      @id @default(autoincrement()) @map("idInforme")
  fecha     DateTime @db.Date
  hora      DateTime @db.Time
  url       String?  @db.VarChar(512)

  // Relación inversa
  informeAlarmas InformeAlarma[]

  @@schema("alarmas")
  @@map("informes")
}

model InformeAlarma {
  idInforme Int    @map("idInforme")
  idAlarma  String @map("idAlarma") @db.VarChar(50)

  // Relaciones
  informe Informes @relation(fields: [idInforme], references: [idInforme], onDelete: Cascade)

  @@id([idInforme, idAlarma])
  @@schema("alarmas")
  @@map("informeAlarma")
}